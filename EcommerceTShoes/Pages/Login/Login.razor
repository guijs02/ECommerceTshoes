@page "/Login"
@using EcommerceWeb.Services.Interfaces;
@using LoginAPI.Dto;

@inject IUsuarioService _service
@inject NavigationManager _navigation

@if (OnInitializedCompleted)
{

    <div class="container d-flex align-items-center justify-content-center vh-100">
        <div class="col-md-3">
            <div class="card shadow">
                <div class="card-body">
                    <h1 class="card-title text-center mb-4">Login</h1>
                    <div class="mb-3">
                        <label for="email" class="form-label">Usuario</label>
                        <input type="text" @bind-value="loginUsuario.Username" class="form-control form-control-sm" placeholder="Digite seu nome">
                    </div>
                    <div class="mb-3">
                        <label for="senha" class="form-label">Senha</label>
                        <input type="password" @bind-value="loginUsuario.Password" class="form-control form-control-sm" id="senha" placeholder="Digite sua senha">
                    </div>
                    <div class="d-grid">
                        <button @onclick="LoginUsuario" class="btn btn-primary btn-block">
                            Entrar

                        </button>


                    </div>
                    
                    <p class="text-center mt-3">Ainda não possui uma conta? <a href="/Cadastrar">Cadastre-se</a></p>
                </div>
                @if (!string.IsNullOrEmpty(Mensagem))
                {
                    <div class="alert alert-danger">
                        @Mensagem
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    public LoginUsuarioDto loginUsuario { get; set; }
    public string Mensagem { get; set; } = string.Empty;
    public bool OnInitializedCompleted { get; set; } = false;
    public EventCallback RedirectToAnyUrl { get; set; }
    public string State { get; set; }
    public bool VisualizarSpinner { get; set; }
    [Parameter]
    public bool IsRedirectToCheckout { get; set; } = false;

    protected override void OnInitialized()
    {
        loginUsuario = new();
        OnInitializedCompleted = true;

    }
    public async Task LoginUsuario()
    {
        // VisualizarSpinner = true;
        // await Task.Delay(4000).ContinueWith(_ => VisualizarSpinner = false);
        try
        {
            if (string.IsNullOrEmpty(loginUsuario.Username) || string.IsNullOrEmpty(loginUsuario.Password))
            {
                Mensagem = "Os campos não podem ser nulos";
                return;
            }

            await _service.Login(loginUsuario);

            if (IsRedirectToCheckout)
                _navigation.NavigateTo("pagamento");
            else
                _navigation.NavigateTo("/");

        }
        catch (Exception ex)
        {
            Mensagem = ex.Message;

        }

    }
}
